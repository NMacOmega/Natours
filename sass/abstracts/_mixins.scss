@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin absCenter {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

//MEDIA QUERY MANAGER
/*
  0 - 600px : Phone
  600px -  900px: Tablet Portrait
  900px - 1200px: Tablet Landscape
  1200px - 1800px: Where Normal Styles Apply
  1800px+ : Large Desktop
'*/

/*$breakpoint argument choices
 phone
 tab-port
 tab-land
 big-desktop

1em = 16px

USING EMS WILL BE MORE RESPONSIVE TO WHAT THE USER PICKS IN THE BROWSERS. PIXESL IGNOR THIS
 */

/*
 This is a good progression of implementing breakpoints in these files:
 Base → typography → general layout + grid → pages → components
 
 */
@mixin respond($breakpoint) {
  @if $breakpoint == phone {
    @media only screen and (max-width: 37.5em) {
      //600px
      @content;
    }
  }

  @if $breakpoint == tab-port {
    @media only screen and (max-width: 56.25em) {
      //900px
      @content;
    }
  }

  @if $breakpoint == tab-land {
    @media only screen and (max-width: 75em) {
      //1200px
      @content;
    }
  }

  @if $breakpoint == big-desktop {
    //1800px
    @media only screen and (min-width: 112.5em) {
      @content;
    }
  }
}

@mixin highres {
  //Webkit pixel ration is used for Safari devices as min resolution does not work in Safari
  //192 dpi line for Apple retina screens, which is the baseline for resolution tests
  //More info at https://www.udemy.com/course/advanced-css-and-sass/learn/lecture/8274566#notes

  //We use em because it is more consistent and performant than px or rem
  @media only screen and (min-width: 125em/*2000px*/),
    only screen and (min-width: 37.5em /*600px*/) and (min-resolution: 192dpi),
    only screen and (min-width: 37.5em /*600px*/) and (-webkit-min-device-pixel-ration: 2) {
    @content;
  }
}
